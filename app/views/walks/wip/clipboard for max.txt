<!-- <html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Getting started with the Mapbox Directions API</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js"></script>
    <link
      href="https://api.tiles.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css"
      rel="stylesheet"
    />
    <style>
      body {
        margin: 0;
        padding: 0;
      }

      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>
      // javascript
      mapboxgl.accessToken = ' <UserAccesstoken> ';
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v12',
        center: [51.48317, -0.10891], //starting position
        zoom:12
      });
      // set bounds of the map
      const bounds = [
        [51.46189, -0.50666],
        [51.66953, -0.11229]
      ];
      map.setMaxBounds(bounds);

      //arbitary start point needs to be updated to be user location end can be changed
      const start = [51.48317, -0.10891];

      async function getRoute(end) {
        const query = await fetch(`https://api.mapbox.com/directions/v5/mapbox/cycling/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`,
    { method: 'GET' }

        );
        const json = await query.json();
        const data = json.routes[0];
        const route = data.geometry.coordinates;
        const geojson =
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'LineString',
          coordinates: route
      }
      // if the route already exists on the map, we'll reset it using setData
  if (map.getSource('route')) {
    map.getSource('route').setData(geojson);
  }
  // otherwise, we'll make a new request
  else {
    map.addLayer({
      id: 'route',
      type: 'line',
      source: {
        type: 'geojson',
        data: geojson
      },
      layout: {
        'line-join': 'round',
        'line-cap': 'round'
      },
      paint: {
        'line-color': '#3887be',
        'line-width': 5,
        'line-opacity': 0.75
      }
    });
  }
  // add turn instructions here at the end
}

map.on('load', () => {
  // make an initial directions request that
  // starts and ends at the same location
  getRoute(start);

  // Add starting point to the map
  map.addLayer({
    id: 'point',
    type: 'circle',
    source: {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: [
          {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'Point',
              coordinates: start
            }
          }
        ]
      }
    },
    paint: {
      'circle-radius': 10,
      'circle-color': '#3887be'
    }
  });
      });
    </script>
  </body>
</html>
-->
data-map-markers-value=<%= [{"lng": -0.1275862,  "lat":51.5072178},{"lng": -0.0633456456978407,  "lat": 51.44795158445348 -0.0633456456978407}].to_json %>>
<body>
    <button id="showPopupButton">Display Walk Data</button>

    <script>
        function showPopup(Walk) {
            console.log('showPopup function called');
            console.log('Walk ID:', Walk.id);
            console.log('Start Time:', Walk.start_time);
            console.log('End Time:', Walk.end_time);
            console.log('Distance:', Walk.distance);
            console.log('Pace:', Walk.pace);

            const popup = document.createElement('div');
            popup.classList.add('popup');

            const content = document.createElement('div');
            content.innerHTML =  `
                <h2>Last Walk</h2>
                <p>Walk ID: ${Walk.id}</p>
                <p>Start Time: ${Walk.start_time}</p>
                <p>End Time: ${Walk.end_time}</p>
                <p>Distance: ${Walk.distance}</p>
                <p>Pace: ${Walk.pace}</p>
            `;

            popup.appendChild(content);
            document.body.appendChild(popup);

            setTimeout(() => {
                document.body.removeChild(popup);
            }, 5000);

            const style = document.createElement('style');
            style.innerHTML = `
                .popup {
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background-color: white;
                    padding: 20px;
                    border: 1px solid #ccc;
                    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                    z-index: 9999;
                }

                .popup h2 {
                    margin-top: 0;
                }

                .popup p {
                    margin: 5px 0;
                }

                .tracking-button {
                    position: fixed;
                    top: 10px;
                    left: 50%;
                    transform: translateX(-50%);
                }
            `;
            document.head.appendChild(style);
        }

        // document.getElementById('showPopupButton').addEventListener('click', () => {
        //     const walkData = Walk.last();
        //     showPopup(walkData);
        // });
    </script>
</body>
</html>
